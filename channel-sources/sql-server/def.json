{
  "name": "SQL Server",
  "description": "With this flow you can populate an ES index with SQL Server data. Truncate/Reload and Incremental Updates are supported.",
  "groups": [
    {
      "key": "connectionInformation",
      "title": "Server Connection Information",
      "description": "Below provide the information required to connect to your server."
    },
    {
      "key": "connectionCredential",
      "title": "Server Connection Credentials",
      "description": "Now that we know how to connect to your SQL Server, let's make sure we have the permission to do so."
    },
    {
      "key": "queryDetails",
      "title": "Query Details",
      "description": "Great, we are connected and down to business. Specify how often you want to update your data and the query you want to use"
    }
  ],
  "parameters": [
    {
      "type": "text",
      "group": "connectionInformation",
      "name": "server",
      "label": "Server",
      "description": "Server",
      "required": true
    },
    {
      "type": "text",
      "group": "connectionInformation",
      "name": "database",
      "label": "Database",
      "description": "Database"
    },
    {
      "type": "text",
      "group": "connectionCredential",
      "name": "userName",
      "label": "Username",
      "required": true
    },
    {
      "type": "password",
      "group": "connectionCredential",
      "name": "password",
      "label": "Password",
      "description": "Password",
      "required": true
    },
    {
      "type": "text",
      "group": "connectionCredential",
      "name": "domain",
      "label": "Domain",
      "description": "To use with Windows Authentication specify the domain here. Leave blank to login as a database user."
    },
    {
      "type": "boolean",
      "group": "connectionCredential",
      "name": "encrypt",
      "label": "Encrypt the Connection?",
      "description": "Set this to true if you need to encrypt the connection, this is usually required for Azure."
    },
    {
      "type": "text",
      "group": "queryDetails",
      "name": "updateFrequency",
      "label": "Update Frequency",
      "placeholder": "ex: Every 5 minutes",
      "description": "Specify the frequency of update in fairly natural language. Here are some examples<ul><li>\"every 15 minutes\"</li><li>\"on the last day of the month\"</li><li>\"at 5:00pm from Monday trought Friday\"</li></ul><br\\>For more examples click <a>here</a>.",
      "required": true
    },
    {
      "type": "boolean",
      "group": "queryDetails",
      "name": "truncate",
      "label": "Overwrite",
      "description": "Setting this to true will clear out existing data before loading new data. In otherwords this will 'Truncate' the data. Setting this to false allows incremental loading."
    },
    {
      "type": "text",
      "group": "queryDetails",
      "name": "uniqueField",
      "label": "Unique Field",
      "description": "Specifying a unique field with overwrite turned off allows for incremental loading of data. The unique field will prevent duplicates and allow updates. This also exposes the parameter latestUniqueField to the query. Use it to start the query at the right spot.",
      "required": false
    },
    {
      "type": "text",
      "group": "queryDetails",
      "name": "uniqueFieldStart",
      "label": "Unique Field Starting Position",
      "default": "0",
      "description": "Let's say that my unique field above is an autoincremented ID. I could use this field to start extracting data at an arbitrary ID rather than 0.",
      "required": false
    },
    {
      "type": "code",
      "group": "queryDetails",
      "name": "query",
      "label": "Query",
      "placeholder": "Query",
      "description": "Query",
      "required": true
    }
  ],
  "flow": {
    "label": "{{_name}}",
    "nodes": [
      {
        "id": "{{_id}}-core-1",
        "type": "comment",
        "name": "Load Configuration on Start-Up",
        "info": "",
        "x": 170,
        "y": 40,
        "wires": []
      },
      {
        "id": "{{_id}}-core-2",
        "type": "inject",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 130,
        "y": 80,
        "wires": [
          [
            "{{_id}}-core-3"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-3",
        "type": "function",
        "name": "Format",
        "func": "msg = {\n    url: global.get('conveyor-api').url + '/flow/{{_url}}',\n    method: 'GET'\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 80,
        "wires": [
          [
            "{{_id}}-core-4"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-4",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 430,
        "y": 80,
        "wires": [
          [
            "{{_id}}-core-39"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-5",
        "type": "function",
        "name": "",
        "func": "var parameters = msg.payload.parameters;\nvar parameterNames = [];\n\nparameters.forEach(function(param) {\n    parameterNames.push(param.key)\n    \n    flow.set(param.key, param.value)\n})\n\nflow.set('params', parameterNames);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 80,
        "wires": [
          []
        ]
      },
      {
        "id": "{{_id}}-core-6",
        "type": "comment",
        "name": "Configuration Endpoints",
        "info": "",
        "x": 150,
        "y": 140,
        "wires": []
      },
      {
        "id": "{{_id}}-core-7",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/config",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 180,
        "wires": [
          [
            "{{_id}}-core-8"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-8",
        "type": "function",
        "name": "",
        "func": "var paramNames = flow.get('params');\nvar parameters = {};\n\nparamNames.forEach(function(name) {\n    parameters[name] = flow.get(name);\n})\n\nmsg.payload = parameters\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 180,
        "wires": [
          [
            "{{_id}}-core-9"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-9",
        "type": "http response",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 180,
        "wires": []
      },
      {
        "id": "{{_id}}-core-10",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/config",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 220,
        "wires": [
          [
            "{{_id}}-core-11"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-11",
        "type": "function",
        "name": "",
        "func": "msg.payload = 'Post is currently not supported. Use PUT to update.'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 220,
        "wires": [
          [
            "{{_id}}-core-9"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-12",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/config",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 260,
        "wires": [
          [
            "{{_id}}-core-13"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-13",
        "type": "function",
        "name": "",
        "func": "var paramNames = flow.get('params');\nvar updates = [];\nvar errors = [];\n\nif (msg.payload) {\n    var paramsToUpdate = Object.keys(msg.payload);\n    \n    paramsToUpdate.forEach(function(update) {\n        if (paramNames.includes(update)) {\n            var updateParam = {\n                key: update,\n                value: msg.payload[update]\n            }\n            \n            updates.push(updateParam)\n        } else {\n            errors.push('Parameter [' + update + '] not valid.');\n        }\n    })\n} else {\n    errors.push('No Payload found');\n}\n\nif (errors.length > 0) {\n    msg.payload = errors\n} else {\n    updates.forEach(function(update) {\n        flow.set(update.key, update.value)\n    })\n    \n    var elasticParamsUpdate = [];\n    paramNames.forEach(function(param) {\n        elasticParamsUpdate.push({\n            \"key\": param,\n            \"value\": flow.get(param)\n        })\n    })\n    \n    msg.url = global.get('node-red').url + '/elasticsearch',\n    msg.method = 'POST',\n    msg.payload = {};\n    msg.payload.path = '/flow/default/AWFK160amolp6Xu7hC0P/_update',\n    msg.payload.method = 'POST',\n    msg.payload.payload = {\n        \"doc\" : {\n        \"parameters\" : elasticParamsUpdate\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 260,
        "wires": [
          [
            "{{_id}}-core-18"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-14",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/config",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 300,
        "wires": [
          [
            "{{_id}}-core-15"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-15",
        "type": "function",
        "name": "",
        "func": "msg.payload = 'Delete is currently not supported. Use PUT to update.'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 300,
        "wires": [
          [
            "{{_id}}-core-9"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-16",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/config",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 340,
        "wires": [
          [
            "{{_id}}-core-17"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-17",
        "type": "function",
        "name": "",
        "func": "msg.payload = 'Patch is currently not supported. Use PUT to update.'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 340,
        "wires": [
          [
            "{{_id}}-core-9"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-18",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 260,
        "wires": [
          [
            "{{_id}}-core-19"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-19",
        "type": "function",
        "name": "",
        "func": "if (msg.statusCode != 200) {\n    msg.payload = 'Local Flow Configuration Updated, but not persisted.',\n    msg.statusCode = 500\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 260,
        "wires": [
          [
            "{{_id}}-core-9"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-20",
        "type": "comment",
        "name": "Data Endpoints",
        "info": "",
        "x": 120,
        "y": 400,
        "wires": []
      },
      {
        "id": "{{_id}}-core-21",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 440,
        "wires": [
          [
            "{{_id}}-core-22"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-22",
        "type": "function",
        "name": "",
        "func": "msg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/_search',\n    method: 'GET'\n}\n\nif (msg.req._parsedUrl.search) {\n    msg.payload.path += msg.req._parsedUrl.search\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 440,
        "wires": [
          [
            "{{_id}}-core-24"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-23",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/data/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 600,
        "wires": [
          [
            "{{_id}}-core-37"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-24",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 440,
        "wires": [
          [
            "{{_id}}-core-25"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-25",
        "type": "function",
        "name": "",
        "func": "var data = [];\n\nif (msg.payload.hits && msg.payload.hits.hits) {\n    data = msg.payload.hits.hits;    \n}\n\nmsg.payload = data\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 440,
        "wires": [
          [
            "{{_id}}-core-26"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-26",
        "type": "http response",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 520,
        "wires": []
      },
      {
        "id": "{{_id}}-core-27",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/data/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 480,
        "wires": [
          [
            "{{_id}}-core-28"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-28",
        "type": "function",
        "name": "",
        "func": "msg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default/' + msg.req.params.id,\n    method: 'GET'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 480,
        "wires": [
          [
            "{{_id}}-core-29"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-29",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 480,
        "wires": [
          [
            "{{_id}}-core-30"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-30",
        "type": "function",
        "name": "",
        "func": "if (msg.payload.found === true && msg.payload._source) {\n    var data = msg.payload._source;\n}\n\nmsg.payload = data\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 480,
        "wires": [
          [
            "{{_id}}-core-26"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-31",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 520,
        "wires": [
          [
            "{{_id}}-core-26"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-32",
        "type": "httpInMultipart",
        "name": "",
        "url": "/{{_url}}/data",
        "method": "post",
        "fields": "",
        "swaggerDoc": "",
        "x": 160,
        "y": 520,
        "wires": [
          [
            "{{_id}}-core-33"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-33",
        "type": "function",
        "name": "",
        "func": "var body = msg.payload;\n\nmsg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default',\n    method: 'POST',\n    payload: body\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 520,
        "wires": [
          [
            "{{_id}}-core-31"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-34",
        "type": "http in",
        "name": "",
        "url": "/{{_url}}/data/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 560,
        "wires": [
          [
            "{{_id}}-core-35"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-35",
        "type": "function",
        "name": "",
        "func": "var body = msg.payload;\n\nmsg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default/' + msg.req.params.id,\n    method: 'PUT',\n    payload: body\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 560,
        "wires": [
          [
            "{{_id}}-core-36"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-36",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 560,
        "wires": [
          [
            "{{_id}}-core-26"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-37",
        "type": "function",
        "name": "",
        "func": "msg.url = global.get('node-red').url + '/elasticsearch',\nmsg.method = 'POST',\nmsg.payload = {\n    path: '/{{_index}}/default/' + msg.req.params.id,\n    method: 'DELETE'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 600,
        "wires": [
          [
            "{{_id}}-core-38"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-38",
        "type": "http request",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 600,
        "wires": [
          [
            "{{_id}}-core-26"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-39",
        "type": "switch",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
          {
            "t": "eq",
            "v": "200",
            "vt": "num"
          },
          {
            "t": "else"
          }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 570,
        "y": 80,
        "wires": [
          [
            "{{_id}}-core-5"
          ],
          [
            "{{_id}}-core-40"
          ]
        ]
      },
      {
        "id": "{{_id}}-core-40",
        "type": "delay",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 440,
        "y": 120,
        "wires": [
          [
            "{{_id}}-core-3"
          ]
        ]
      },
      {
        "repeat": "",
        "name": "Inject on Startup",
        "crontab": "",
        "id": "{{_id}}-1",
        "topic": "",
        "payloadType": "str",
        "wires": [
          [
            "{{_id}}-2"
          ]
        ],
        "y": 700,
        "x": 130,
        "type": "inject",
        "payload": "Fail",
        "once": true
      },
      {
        "wires": [
          [
            "{{_id}}-4"
          ]
        ],
        "name": "",
        "schedule": "{{updateFrequency}}",
        "y": 700,
        "x": 510,
        "type": "later",
        "id": "{{_id}}-3"
      },
      {
        "wires": [],
        "console": "false",
        "complete": "true",
        "y": 700,
        "active": true,
        "x": 1171,
        "type": "debug",
        "id": "{{_id}}-5",
        "name": "These Are Errors!"
      },
      {
        "wires": [
          [
            "{{_id}}-3"
          ]
        ],
        "name": "",
        "outputs": 1,
        "noerr": 0,
        "func": "flow.set('index', '{{_index}}')\nflow.set('truncate', {{truncate}})\nflow.set('uniqueField', '{{uniqueField}}')\nflow.set('latestUniqueField', '{{uniqueFieldStart}}')\n\nreturn msg;",
        "y": 700,
        "x": 330,
        "type": "function",
        "id": "{{_id}}-2"
      },
      {
        "wires": [
          [
            "{{_id}}-7"
          ]
        ],
        "name": "Query",
        "format": "handlebars",
        "syntax": "mustache",
        "field": "payload",
        "fieldType": "msg",
        "template": "{{{query}}}",
        "x": 130,
        "y": 900,
        "output": "str",
        "type": "template",
        "id": "{{_id}}-6"
      },
      {
        "outField": "payload",
        "wires": [
          [
            "{{_id}}-9"
          ]
        ],
        "name": "",
        "mssqlCN": "{{_id}}-8",
        "x": 270,
        "y": 900,
        "query": "",
        "type": "MSSQL",
        "id": "{{_id}}-7"
      },
      {
        "wires": [
          [
            "{{_id}}-5"
          ],
          [
            "{{_id}}-10"
          ]
        ],
        "name": "Verify Later Parse",
        "outputs": "2",
        "noerr": 0,
        "func": "if (msg.later) {\n    return [null, msg]\n} else {\n    return [msg, null];\n}",
        "y": 700,
        "x": 690,
        "type": "function",
        "id": "{{_id}}-4"
      },
      {
        "wires": [
          [
            "{{_id}}-12"
          ]
        ],
        "name": "",
        "outputs": "1",
        "noerr": 0,
        "func": "var index = flow.get('index')\nvar operation = {\n    \"_index\": index,\n    \"_type\": \"default\"\n    }\n    \nvar uniqueField = flow.get('uniqueField')\n\nif (uniqueField && uniqueField !== '' && msg.payload[uniqueField]) {\n    operation['_id'] = msg.payload[uniqueField]\n    \n    if (msg.parts.index == msg.parts.count - 1) {\n        flow.set('latestUniqueField', msg.payload[uniqueField])\n    }\n}\n\nvar msg1 = {\n    payload: JSON.stringify({index: operation})\n}\n\nvar msg2 = {\n    payload: JSON.stringify(msg.payload)\n}\n\nif (msg.parts.index == (msg.parts.count - 1)) {\n    msg2.complete = true\n}\n\nreturn [[msg1,msg2]];",
        "y": 900,
        "x": 550,
        "type": "function",
        "id": "{{_id}}-11"
      },
      {
        "wires": [
          [
            "{{_id}}-11"
          ]
        ],
        "name": "",
        "splt": "\\n",
        "y": 900,
        "x": 410,
        "type": "split",
        "id": "{{_id}}-9"
      },
      {
        "count": "1000",
        "joiner": "\\n",
        "name": "",
        "timeout": "",
        "wires": [
          [
            "{{_id}}-13"
          ]
        ],
        "build": "string",
        "key": "topic",
        "propertyType": "msg",
        "y": 900,
        "x": 690,
        "property": "payload",
        "type": "join",
        "id": "{{_id}}-12",
        "mode": "custom"
      },
      {
        "tls": "",
        "wires": [
          [
            "{{_id}}-15"
          ]
        ],
        "name": "",
        "url": "elasticsearch:9200/_bulk",
        "ret": "obj",
        "id": "{{_id}}-14",
        "y": 900,
        "x": 1090,
        "type": "http request",
        "method": "POST"
      },
      {
        "wires": [
          [
            "{{_id}}-14"
          ]
        ],
        "name": "Add Trailing New Line",
        "outputs": 1,
        "noerr": 0,
        "func": "msg.payload += \"\\n\"\nreturn msg;",
        "y": 900,
        "x": 880,
        "type": "function",
        "id": "{{_id}}-13"
      },
      {
        "wires": [],
        "console": "false",
        "complete": "false",
        "y": 900,
        "active": true,
        "x": 1270,
        "type": "debug",
        "id": "{{_id}}-15",
        "name": ""
      },
      {
        "wires": [],
        "name": "Truncate",
        "links": [
          "{{_id}}-17"
        ],
        "y": 740,
        "x": 870,
        "type": "link out",
        "id": "{{_id}}-16"
      },
      {
        "wires": [
          [
            "{{_id}}-18"
          ]
        ],
        "name": "Truncate In",
        "links": [
          "{{_id}}-16"
        ],
        "y": 820,
        "x": 35,
        "type": "link in",
        "id": "{{_id}}-17"
      },
      {
        "info": "",
        "wires": [],
        "name": "Truncate Existing Data",
        "y": 780,
        "x": 120,
        "type": "comment",
        "id": "{{_id}}-19"
      },
      {
        "tls": "",
        "wires": [
          [
            "{{_id}}-21"
          ]
        ],
        "name": "",
        "url": "elasticsearch:9200/{{_index}}/_delete_by_query",
        "ret": "obj",
        "id": "{{_id}}-20",
        "y": 820,
        "x": 610,
        "type": "http request",
        "method": "POST"
      },
      {
        "wires": [],
        "name": "Query",
        "links": [
          "{{_id}}-23"
        ],
        "y": 820,
        "x": 951,
        "type": "link out",
        "id": "{{_id}}-22"
      },
      {
        "wires": [
          [
            "{{_id}}-6"
          ]
        ],
        "name": "Query In",
        "links": [
          "{{_id}}-22"
        ],
        "y": 900,
        "x": 35,
        "type": "link in",
        "id": "{{_id}}-23"
      },
      {
        "info": "",
        "wires": [],
        "name": "Query New Data",
        "y": 860,
        "x": 100,
        "type": "comment",
        "id": "{{_id}}-24"
      },
      {
        "wires": [
          [
            "{{_id}}-5"
          ],
          [
            "{{_id}}-22"
          ]
        ],
        "name": "",
        "outputs": "2",
        "noerr": 0,
        "func": "if (msg.statusCode && msg.statusCode == 200) {\n    return [null, msg]\n} else {\n    return [msg, null]\n}",
        "y": 700,
        "x": 770,
        "type": "function",
        "id": "{{_id}}-21"
      },
      {
        "wires": [
          [
            "{{_id}}-20"
          ],
          [
            "{{_id}}-22"
          ]
        ],
        "name": "",
        "outputs": "2",
        "noerr": 0,
        "func": "if (msg.statusCode == 200) {\n    var newMsg = {\n        payload: {\n            \"query\": {\n                \"match_all\": {}\n            }\n        }\n    }\n    return [newMsg, null]\n} else {\n    return [null, {}]    \n}",
        "y": 700,
        "x": 450,
        "type": "function",
        "id": "{{_id}}-25"
      },
      {
        "tls": "",
        "wires": [
          [
            "{{_id}}-25"
          ]
        ],
        "name": "",
        "url": "elasticsearch:9200/{{_index}}",
        "ret": "txt",
        "id": "{{_id}}-26",
        "y": 700,
        "x": 290,
        "type": "http request",
        "method": "use"
      },
      {
        "wires": [
          [
            "{{_id}}-26"
          ]
        ],
        "name": "",
        "outputs": 1,
        "noerr": 0,
        "func": "msg.method = 'HEAD'\nreturn msg;",
        "y": 700,
        "x": 130,
        "type": "function",
        "id": "{{_id}}-18"
      },
      {
        "checkall": "false",
        "wires": [
          [
            "{{_id}}-22"
          ],
          [
            "{{_id}}-16"
          ]
        ],
        "name": "",
        "rules": [
          {
            "t": "false"
          },
          {
            "t": "true"
          }
        ],
        "outputs": 2,
        "propertyType": "flow",
        "y": 740,
        "x": 845.5,
        "property": "truncate",
        "type": "switch",
        "id": "{{_id}}-10"
      },
      {
        "id": "{{_id}}-27",
        "type": "comment",
        "name": "Primary Flow",
        "info": "",
        "x": 110,
        "y": 660,
        "wires": []
      },
      {
        "name": "Connection for {{_name}}",
        "database": "{{database}}",
        "server": "{{server}}",
        "encyption": "{{encrypt}}",
        "credentials": {
          "username": "{{userName}}",
          "domain": "{{domain}}",
          "password": "{{password}}"
        },
        "type": "MSSQL-CN",
        "id": "{{_id}}-8"
      }
    ]
  }
}